Last-Update: 2018-03-04
Forwarded: no
Author: Dmitry Smirnov <onlyjob@member.fsf.org>
Description: fix FTBFS in antlr.

E: mysql-workbench source: license-problem-convert-utf-code ext/antlr-runtime/src/antlr3convertutf.c
N:
N:    The following file source files include material under a non-free
N:    license from Unicode Inc. Therefore, it is not possible to ship this in
N:    main or contrib.
N:
N:    This license does not grant any permission to modify the files (thus
N:    failing DFSG#3). Moreover, the license grant seems to attempt to
N:    restrict use to "products supporting the Unicode Standard" (thus failing
N:    DFSG#6).
N:
N:    In this case a solution is to use libicu and to remove this code by
N:    repacking.
N:
N:    If this is a false-positive, please report a bug against Lintian.
N:
N:    Refer to https://bugs.debian.org/823100 for details.
N:
N:    Severity: serious, Certainty: possible
N:
N:    Check: cruft, Type: source

--- a/ext/antlr-runtime/Makefile.am
+++ b/ext/antlr-runtime/Makefile.am
@@ -12,9 +12,8 @@
 					src/antlr3commontoken.c				\
 					src/antlr3commontree.c				\
 					src/antlr3commontreeadaptor.c		\
 					src/antlr3commontreenodestream.c	\
-					src/antlr3convertutf.c				\
 					src/antlr3cyclicdfa.c				\
 					src/antlr3debughandlers.c			\
 					src/antlr3encodings.c				\
 					src/antlr3exception.c				\
@@ -39,9 +38,8 @@
 					include/antlr3commontoken.h				\
 					include/antlr3commontree.h				\
 					include/antlr3commontreeadaptor.h		\
 					include/antlr3commontreenodestream.h	\
-					include/antlr3convertutf.h				\
 					include/antlr3cyclicdfa.h				\
 					include/antlr3debugeventlistener.h		\
 					include/antlr3defs.h					\
 					include/antlr3encodings.h				\
--- a/ext/antlr-runtime/src/antlr3string.c
+++ b/ext/antlr-runtime/src/antlr3string.c
@@ -85,9 +85,8 @@
 static	  ANTLR3_INT32	    toInt32_UTF16  (pANTLR3_STRING string);
 static	  pANTLR3_STRING    to8_8		(pANTLR3_STRING string);
 static	  pANTLR3_STRING    to8_UTF16		(pANTLR3_STRING string);
 static	pANTLR3_STRING		toUTF8_8	(pANTLR3_STRING string);
-static	pANTLR3_STRING		toUTF8_UTF16	(pANTLR3_STRING string);
 
 /* Local helpers
  */
 static	void			stringInit8	(pANTLR3_STRING string);
@@ -317,9 +316,8 @@
     string->compare8	= compareUTF16_8;
     string->subString	= subStringUTF16;
     string->toInt32	= toInt32_UTF16;
     string->to8		= to8_UTF16;
-    string->toUTF8	= toUTF8_UTF16;
 
     string->compareS	= compareS;
     string->setS	= setS;
     string->appendS	= appendS;
@@ -350,66 +348,8 @@
 {
 	return string->factory->newPtr(string->factory, (pANTLR3_UINT8)(string->chars), string->len);
 }
 
-// Convert a UTF16 string into a UTF8 representation using the Unicode.org
-// supplied C algorithms, which are now contained within the ANTLR3 C runtime
-// as permitted by the Unicode license (within the source code antlr3convertutf.c/.h
-// UCS2 has the same encoding as UTF16 so we can use UTF16 converter.
-//
-static	pANTLR3_STRING	
-toUTF8_UTF16	(pANTLR3_STRING string)
-{
-
-    UTF8	      * outputEnd;	
-    UTF16	      * inputEnd;
-    pANTLR3_STRING	utf8String;
-
-    ConversionResult	cResult;
-
-    // Allocate the output buffer, which needs to accommodate potentially
-    // 3X (in bytes) the input size (in chars).
-    //
-    utf8String	= string->factory->newStr8(string->factory, (pANTLR3_UINT8)"");
-
-    if	(utf8String != NULL)
-    {
-        // Free existing allocation
-        //
-        ANTLR3_FREE(utf8String->chars);
-
-        // Reallocate according to maximum expected size
-        //
-        utf8String->size	= string->len *3;
-        utf8String->chars	= (pANTLR3_UINT8)ANTLR3_MALLOC(utf8String->size +1);
-
-        if	(utf8String->chars != NULL)
-        {
-            inputEnd  = (UTF16 *)	(string->chars);
-            outputEnd = (UTF8 *)	(utf8String->chars);
-
-            // Call the Unicode converter
-            //
-            cResult =  ConvertUTF16toUTF8
-                (
-                (const UTF16**)&inputEnd, 
-                ((const UTF16 *)(string->chars)) + string->len, 
-                &outputEnd, 
-                outputEnd + utf8String->size - 1,
-                lenientConversion
-                );
-
-            // We don't really care if things failed or not here, we just converted
-            // everything that was vaguely possible and stopped when it wasn't. It is
-            // up to the grammar programmer to verify that the input is sensible.
-            //
-            utf8String->len = ANTLR3_UINT32_CAST(((pANTLR3_UINT8)outputEnd) - utf8String->chars);
-
-            *(outputEnd+1) = '\0';		// Always null terminate
-        }
-    }
-    return utf8String;
-}
 
 /**
  * Creates a new string with enough capacity for size 8 bit characters plus a terminator.
  *
