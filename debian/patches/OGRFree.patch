Last-Update: 2018-03-04
Forwarded: no
Author: Dmitry Smirnov <onlyjob@member.fsf.org>
Description: fix FTBFS in antlr.
~~~~
/build/mysql-workbench-6.3.10+dfsg/backend/wbpublic/grt/spatial_handler.cpp:446:22: error: 'void OGRFree(void*)' is deprecated [-Werror=deprecated-declarations]                                                                                                                                                        
     OGRFree(_geometry); 
                      ^ 
In file included from /usr/include/gdal/ogr_featurestyle.h:35:0, 
                 from /usr/include/gdal/ogr_feature.h:35, 
                 from /usr/include/gdal/ogrsf_frmts.h:35, 
                 from /build/mysql-workbench-6.3.10+dfsg/backend/wbpublic/grt/spatial_handler.h:23, 
                 from /build/mysql-workbench-6.3.10+dfsg/backend/wbpublic/grt/spatial_handler.cpp:20: 
/usr/include/gdal/ogr_core.h:265:14: note: declared here 
 void CPL_DLL OGRFree( void * ) CPL_WARN_DEPRECATED("Use CPLFree instead."); 
              ^~~~~~~ 
/build/mysql-workbench-6.3.10+dfsg/backend/wbpublic/grt/spatial_handler.cpp: In member function 'std::__cxx11::string spatial::Importer::as_wkt()': 
/build/mysql-workbench-6.3.10+dfsg/backend/wbpublic/grt/spatial_handler.cpp:498:19: error: 'void OGRFree(void*)' is deprecated [-Werror=deprecated-declarations]                                                                                                                                                        
       OGRFree(data); 
                   ^ 
~~~~

--- a/backend/wbpublic/grt/spatial_handler.cpp
+++ b/backend/wbpublic/grt/spatial_handler.cpp
@@ -442,9 +442,9 @@
 }
 
 spatial::Importer::~Importer() {
   if (_geometry != NULL)
-    OGRFree(_geometry);
+    CPLFree(_geometry);
 }
 
 OGRGeometry *spatial::Importer::steal_data() {
   OGRGeometry *tmp = _geometry;
@@ -494,9 +494,9 @@
     if ((err = _geometry->exportToWkt(&data)) != OGRERR_NONE) {
       logError("Error exporting data to WKT (%i)\n", err);
     } else {
       std::string tmp(data);
-      OGRFree(data);
+      CPLFree(data);
       return tmp;
     }
   }
   return "";
--- a/backend/wbpublic/objimpl/db.query/db_query_Resultset.cpp
+++ b/backend/wbpublic/objimpl/db.query/db_query_Resultset.cpp
@@ -46,9 +46,9 @@
   OGRErr ret_val =
     OGRGeometryFactory::createFromWkb((unsigned char *)const_cast<char *>(&(*((*data).begin() + 4))), NULL, &geometry);
   if (ret_val != OGRERR_NONE) {
     if (geometry)
-      OGRFree(geometry);
+      CPLFree(geometry);
     throw std::exception();
   }
 
   if (geometry != NULL) {
@@ -60,10 +60,10 @@
       err = geometry->exportToWkt(&data);
 
     if (err == OGRERR_NONE && data != NULL) {
       grt::StringRef tmp(data);
-      OGRFree(data);
-      OGRFree(geometry);
+      CPLFree(data);
+      CPLFree(geometry);
       return tmp;
     } else
       throw std::runtime_error("Conversion of OGR geometry data failed");
   }
